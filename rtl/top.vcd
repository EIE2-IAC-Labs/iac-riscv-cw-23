$version Generated by VerilatedVcd $end
$date Wed Dec  7 16:50:23 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 G TRIGGERSEL $end
  $var wire 32 H a0 [31:0] $end
  $var wire  1 E clk $end
  $var wire  1 F rst $end
  $scope module top $end
   $var wire 32 O ADDRESS_WIDTH [31:0] $end
   $var wire  1 ( ALUctrl $end
   $var wire 32 1 ALUop1 [31:0] $end
   $var wire 32 2 ALUop2 [31:0] $end
   $var wire 32 4 ALUout [31:0] $end
   $var wire  1 ) ALUsrc $end
   $var wire 32 P DATA_WIDTH [31:0] $end
   $var wire  1 Q EQ $end
   $var wire 32 5 ImmOp [31:0] $end
   $var wire  1 * ImmSrc $end
   $var wire  1 - JUMPRT $end
   $var wire  1 . MUXJUMP $end
   $var wire 32 I MUXJUMPOutput [31:0] $end
   $var wire  1 , MemWrite $end
   $var wire 32 6 PC [31:0] $end
   $var wire  1 + PCsrc $end
   $var wire 32 J ReadData [31:0] $end
   $var wire  1 ' RegWrite $end
   $var wire 32 L Result [31:0] $end
   $var wire  1 0 ResultSrc $end
   $var wire  1 G TRIGGERSEL $end
   $var wire 32 K TriggerOutput [31:0] $end
   $var wire  1 / Zero $end
   $var wire 32 H a0 [31:0] $end
   $var wire  1 E clk $end
   $var wire 32 # instr [31:0] $end
   $var wire 16 & rd [15:0] $end
   $var wire 32 3 regOp2 [31:0] $end
   $var wire 16 $ rs1 [15:0] $end
   $var wire 16 % rs2 [15:0] $end
   $var wire  1 F rst $end
   $scope module alu_instance $end
    $var wire 32 4 ALUResult [31:0] $end
    $var wire  3 7 ALUctrl [2:0] $end
    $var wire 32 1 ALUop1 [31:0] $end
    $var wire 32 2 ALUop2 [31:0] $end
    $var wire 32 P DATA_WIDTH [31:0] $end
    $var wire  1 / Zero $end
   $upscope $end
   $scope module control_unit_instance $end
    $var wire  2 = ALUOp [1:0] $end
    $var wire  3 8 ALUctrl [2:0] $end
    $var wire  1 ) ALUsrc $end
    $var wire  3 9 ImmSrc [2:0] $end
    $var wire  1 - JUMPRT $end
    $var wire  1 . MUXJUMP $end
    $var wire  1 , MemWrite $end
    $var wire  1 + PCsrc $end
    $var wire  1 ' RegWrite $end
    $var wire  1 0 ResultSrc $end
    $var wire  1 / Zero $end
    $var wire  1 ? dummy $end
    $var wire  3 ; funct3 [2:0] $end
    $var wire  7 < funct7 [6:0] $end
    $var wire 32 # instr [31:0] $end
    $var wire  7 : op [6:0] $end
    $var wire  2 > opfunct7 [1:0] $end
   $upscope $end
   $scope module data_memory_instance $end
    $var wire 32 4 A [31:0] $end
    $var wire 32 P ADDRESS_WIDTH [31:0] $end
    $var wire 32 P DATA_WIDTH [31:0] $end
    $var wire 32 J RD [31:0] $end
    $var wire 32 3 WD [31:0] $end
    $var wire  1 , WE $end
    $var wire  1 E clk $end
   $upscope $end
   $scope module instr_mem_instance $end
    $var wire 32 6 A [31:0] $end
    $var wire 32 P ADDRESS_WIDTH [31:0] $end
    $var wire 32 R DATA_WIDTH [31:0] $end
    $var wire 32 P OUT_WIDTH [31:0] $end
    $var wire 32 # RD [31:0] $end
    $var wire 12 @ addr [11:0] $end
   $upscope $end
   $scope module pc_top_instance $end
    $var wire 32 5 ImmOp [31:0] $end
    $var wire  1 - JUMPRT $end
    $var wire 32 6 PC [31:0] $end
    $var wire 32 M PCNext [31:0] $end
    $var wire  1 + PCsrc $end
    $var wire 32 L Result [31:0] $end
    $var wire 32 N ReturnMultiplexerOutput [31:0] $end
    $var wire 32 P WIDTH [31:0] $end
    $var wire 32 B branch_PC [31:0] $end
    $var wire  1 E clk $end
    $var wire 32 A inc_PC [31:0] $end
    $var wire  1 F rst $end
    $scope module ProgramCounter $end
     $var wire 32 6 PC [31:0] $end
     $var wire 32 M PCNext [31:0] $end
     $var wire 32 P WIDTH [31:0] $end
     $var wire  1 E clk $end
     $var wire  1 F rst $end
    $upscope $end
   $upscope $end
   $scope module reg_file_instance $end
    $var wire 16 $ AD1 [15:0] $end
    $var wire 16 % AD2 [15:0] $end
    $var wire 16 & AD3 [15:0] $end
    $var wire 32 O ADDRESS_WIDTH [31:0] $end
    $var wire 32 P DATA_WIDTH [31:0] $end
    $var wire 32 1 RD1 [31:0] $end
    $var wire 32 3 RD2 [31:0] $end
    $var wire 32 I WD3 [31:0] $end
    $var wire  1 ' WE3 $end
    $var wire 32 H a0 [31:0] $end
    $var wire  1 E clk $end
   $upscope $end
   $scope module sign_extend_instance $end
    $var wire 32 5 ImmExt [31:0] $end
    $var wire  3 C ImmSrc [2:0] $end
    $var wire  1 D dummy_wire $end
    $var wire 32 # instr [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b0000000000000000 $
b0000000000000000 %
b0000000000000000 &
0'
0(
0)
0*
0+
0,
0-
0.
0/
00
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b000 7
b000 8
b000 9
b0000000 :
b000 ;
b0000000 <
b00 =
b00 >
0?
b000000000000 @
b00000000000000000000000000000100 A
b00000000000000000000000000000000 B
b000 C
0D
1E
1F
1G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000100 M
b00000000000000000000000000000000 N
b00000000000000000000000000010000 O
b00000000000000000000000000100000 P
0Q
b00000000000000000000000000001000 R
#1
b00000000000000000010001110110111 #
b0000000000000111 &
1'
1)
1/
b110 8
b100 9
b0110111 :
b010 ;
b11 =
b10 >
0E
#2
b10111111110000000000000000000000 6
b10111111110000000000000000000100 A
b10111111110000000000000000000000 B
1E
0F
0G
b10111111110000000000000000000100 M
b10111111110000000000000000000000 N
#3
0E
#4
b00000000000000111010110100000011 #
b0000000000000111 $
b0000000000011010 &
10
b10111111110000000000000000000100 6
b000 8
b000 9
b0000011 :
b00 =
b00 >
b000000000100 @
b10111111110000000000000000001000 A
b10111111110000000000000000000100 B
1E
b10111111110000000000000000001000 M
b10111111110000000000000000000100 N
#5
0E
#6
b11111111101000000000101011100011 #
b0000000000000000 $
b0000000000011010 %
b0000000000010101 &
0'
1(
0)
1+
00
b11111111111111111111111111111010 5
b10111111110000000000000000001000 6
b001 7
b001 8
b010 9
b1100011 :
b000 ;
b1111111 <
b01 =
b11 >
b000000001000 @
b10111111110000000000000000001100 A
b10111111110000000000000000000010 B
1E
b10111111110000000000000000000010 M
b10111111110000000000000000000010 N
#7
0E
#8
b10101101000000110000000000000000 #
b0000000000000110 $
b0000000000010000 %
b0000000000000000 &
b11111111111111111111101011010000 5
b10111111110000000000000000000010 6
b0000000 :
b1010110 <
b00 >
b000000000010 @
b10111111110000000000000000000110 A
b10111111101111111111101011010010 B
1E
b10111111101111111111101011010010 M
b10111111101111111111101011010010 N
#9
0E
#10
b00000000000000000000000000000000 #
b0000000000000000 $
b0000000000000000 %
b00000000000000000000000000000000 5
b10111111101111111111101011010010 6
b0000000 <
b101011010010 @
b10111111101111111111101011010110 A
1E
#11
0E
#12
1E
#13
0E
#14
1E
#15
0E
#16
1E
#17
0E
#18
1E
#19
0E
#20
1E
#21
0E
#22
1E
#23
0E
#24
1E
#25
0E
#26
1E
#27
0E
#28
1E
#29
0E
#30
1E
#31
0E
#32
1E
#33
0E
#34
1E
#35
0E
#36
1E
#37
0E
#38
1E
#39
0E
#40
1E
#41
0E
#42
1E
#43
0E
#44
1E
#45
0E
#46
1E
#47
0E
#48
1E
#49
0E
#50
1E
#51
0E
#52
1E
#53
0E
#54
1E
#55
0E
#56
1E
#57
0E
#58
1E
#59
0E
#60
1E
#61
0E
#62
1E
#63
0E
#64
1E
#65
0E
#66
1E
#67
0E
#68
1E
#69
0E
#70
1E
#71
0E
#72
1E
#73
0E
#74
1E
#75
0E
#76
1E
#77
0E
#78
1E
#79
0E
#80
1E
#81
0E
#82
1E
#83
0E
#84
1E
#85
0E
#86
1E
#87
0E
#88
1E
#89
0E
#90
1E
#91
0E
#92
1E
#93
0E
#94
1E
#95
0E
#96
1E
#97
0E
#98
1E
#99
0E
#100
1E
1G
#101
0E
#102
1E
#103
0E
#104
1E
#105
0E
#106
1E
#107
0E
#108
1E
#109
0E
#110
1E
#111
0E
#112
1E
#113
0E
#114
1E
#115
0E
#116
1E
#117
0E
#118
1E
0G
#119
0E
#120
1E
#121
0E
#122
1E
#123
0E
#124
1E
#125
0E
#126
1E
#127
0E
#128
1E
#129
0E
#130
1E
#131
0E
#132
1E
#133
0E
#134
1E
#135
0E
#136
1E
#137
0E
#138
1E
#139
0E
#140
1E
#141
0E
#142
1E
#143
0E
#144
1E
#145
0E
#146
1E
#147
0E
#148
1E
#149
0E
#150
1E
#151
0E
#152
1E
#153
0E
#154
1E
#155
0E
#156
1E
#157
0E
#158
1E
#159
0E
#160
1E
#161
0E
#162
1E
#163
0E
#164
1E
#165
0E
#166
1E
#167
0E
#168
1E
#169
0E
#170
1E
#171
0E
#172
1E
#173
0E
#174
1E
#175
0E
#176
1E
#177
0E
#178
1E
#179
0E
#180
1E
#181
0E
#182
1E
#183
0E
#184
1E
#185
0E
#186
1E
#187
0E
#188
1E
#189
0E
#190
1E
#191
0E
#192
1E
#193
0E
#194
1E
#195
0E
#196
1E
#197
0E
#198
1E
#199
0E
